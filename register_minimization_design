
module register_minimization_design (
   input clk,
   input rst,
   output reg   [3:0] q=0,
   input        [7:0]in,
   output reg   [7:0]out,
   output reg   [7:00]R1,
   output reg   [7:00]R2,
   output reg   [7:00]R3,
   output reg   [7:00]R4,
   output reg   [7:00]R5,
   output reg   [7:00]R6,
   output reg   [7:00]R7,
   output reg   [7:00]R8
);

reg [7:0] reg_0;
reg [7:0] reg_1;

always@(posedge clk)begin
    if(rst == 1'b1)
        q <= 4'd9;
    else if(rst == 1'b0)begin
        
        if(q <= 4'd8)
            q <= q + 1;
        else
            q <= 0;
    end
end

always@(posedge clk)
    begin
        if(q == 4'd9)
            begin
                R2 <= R1;
                R3 <= R2;
                R4 <= R3;
                R5 <= R4;
                R6 <= R5;
                R7 <= R6;
                R8 <= R7;
                R1 <= R8;
                out <= in;
            end
    
        else if(q == 4'd1)
            begin
                out <= R1;
                R1 <= in;
                
                R2 <= R8;
                R8 <= R7;
                R7 <= R6;
                R6 <= R5;
                R5 <= R4;
                R4 <= R3;
                R3 <= R2;
            end
        else if(q == 4'd2)
            begin
                out <= R3;
                R3 <= R2;
                R2 <= R1;
                R1 <= in;
                
                R4 <= R8;
                R8 <= R7;
                R7 <= R6;
                R6 <= R5;
                R5 <= R4;
            end
        else if(q == 4'd3 || q == 4'd5 || q == 4'd6 || q == 4'd7 || q == 4'd8)
            begin
                out <= R7;
                R7 <= R6;
                R6 <= R5;
                R5 <= R4;
                R4 <= R3;
                R3 <= R2;
                R2 <= R1;
                R1 <= in;
                R8 <= R8;//need reconfirm
            end
        else if(q == 4'd4)
            begin
                R5 <= R8;
                R8 <= R7;
                R7 <= R6;
                R6 <= R5;
               
                out <= R4;
                R4 <= R3;
                R3 <= R2;
                R2 <= R1;
                R1 <= in;
            end
     end
                
                
endmodule
